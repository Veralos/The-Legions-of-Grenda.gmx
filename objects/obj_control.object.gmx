<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_resize(application_surface, 256, 224);
window_set_size(256 * 3, 224 * 3);
window_set_position(
    display_get_width() / 2 - 256 * 3 / 2,
    display_get_height() / 2 - 224 * 3 / 2
);
place_width = 256;
place_height = 192;
place_xpos = (obj_hero.x div 256) * place_width;
place_ypos = (obj_hero.y div 192) * place_height - 32;
view_xview[0] = place_xpos;
view_yview[0] = place_ypos;
instance_deactivate_object(obj_resetme);
instance_activate_region(view_xview[0], view_yview[0] + 32, view_wview[0], view_hview[0] - 32, true);

for (var place_x = 0; place_x &lt; room_width; place_x += place_width) {
    for (var place_y = 0; place_y &lt; room_height; place_y += place_height) {
        for (var wall_x = 0; wall_x &lt; place_width; wall_x += 16) {
            if (!place_meeting(place_x + wall_x, place_y, obj_door)) {
                instance_create(place_x + wall_x, place_y, obj_wall);
            }
            if (!place_meeting(place_x + wall_x, place_y + place_height - 16, obj_door)) {
                instance_create(place_x + wall_x, place_y + place_height - 16, obj_wall);
            }
        }
        
        for (var wall_y = 16; wall_y &lt; place_height - 16; wall_y += 16) {
            if (!place_meeting(place_x, place_y + wall_y, obj_door)) {
                instance_create(place_x, place_y + wall_y, obj_wall);
            }
            if (!place_meeting(place_x + place_width - 16, place_y + wall_y, obj_door)) {
                instance_create(place_x + place_width - 16, place_y + wall_y, obj_wall);
            }
        }
    }
}

enum state_type {
    base_state,
    transition_state
}

state = state_type.base_state;
reset = false;

map_grid = ds_grid_create(15, 8);
ds_grid_clear(map_grid, false);

for (var i = 0; i &lt; 5; i++) {
    keys[i] = 0;
}

hp = 5;

audio_play_sound(snd_music, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (reset) {
    with (obj_resetme) {
        event_user(0);
    }
    reset = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state) {
    case state_type.base_state:
        place_xpos = (obj_hero.x div place_width) * place_width;
        place_ypos = (obj_hero.y div place_height) * place_height - 32;
        
        if (place_xpos != view_xview[0] || place_ypos != view_yview[0]) {
            state = state_type.transition_state;
            instance_deactivate_object(obj_resetme);
            ds_grid_set(map_grid, place_xpos div place_width, (place_ypos + 32) div place_height, true);
        }
        
        if (hp &lt;= 0) {
            audio_play_sound(snd_die, 0, false);
            hp = 5;
            place_xpos = (obj_hero.xstart div place_width) * place_width;
            place_ypos = (obj_hero.ystart div place_height) * place_height - 32;
            view_xview[0] = place_xpos;
            view_yview[0] = place_ypos;
            obj_hero.x = obj_hero.xstart;
            obj_hero.y = obj_hero.ystart;
            obj_hero.inv_time = 0;
            instance_deactivate_object(obj_resetme);
            instance_activate_region(view_xview[0], view_yview[0] + 32, view_wview[0], view_hview[0] - 32, true);
            ds_grid_set(map_grid, place_xpos div place_width, (place_ypos + 32) div place_height, true);
        }
        
        break;
    case state_type.transition_state:
        view_xview[0] += 8 * sign(place_xpos - view_xview[0]);
        view_yview[0] += 8 * sign(place_ypos - view_yview[0]);
        if (place_xpos == view_xview[0] &amp;&amp; place_ypos == view_yview[0]) {
            with (obj_boomerang) {
                instance_destroy();
            }
            with (obj_explosion) {
                instance_destroy();
            }
            state = state_type.base_state;
            instance_activate_region(view_xview[0], view_yview[0] + 32, view_wview[0], view_hview[0] - 32, true);
            reset = true;
        }
    
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_color(make_color_rgb(128, 0, 0));
//draw_rectangle(0, 0, room_width, room_height, false);
var vx = view_xview[0];
var vy = view_yview[0];
var vw = view_wview[0];
var vh = view_hview[0];

/*for (var place_x = 0; place_x &lt; room_width; place_x += place_width) {
    for (var place_y = 0; place_y &lt; room_height; place_y += place_height) {
        draw_sprite(spr_background, 0, place_x, place_y);
        /*draw_sprite(spr_border_corner_rd, 0, place_x, place_y);
        draw_sprite(spr_border_corner_ld, 0, place_x + place_width - 16, place_y);
        draw_sprite(spr_border_corner_ru, 0, place_x, place_y + place_height - 16);
        draw_sprite(spr_border_corner_lu, 0, place_x + place_width - 16, place_y + place_height - 16);
        
        for (var draw_x = 16; draw_x &lt; place_width - 16; draw_x += 16) {
            draw_sprite(spr_wall_d, 0, place_x + draw_x, place_y);
            draw_sprite(spr_wall_u, 0, place_x + draw_x, place_y + place_height - 16);
        } 
        
        for (var draw_y = 16; draw_y &lt; place_height - 16; draw_y += 16) {
            draw_sprite(spr_wall_r, 0, place_x, place_y + draw_y);
            draw_sprite(spr_wall_l, 0, place_x + place_width - 16, place_y + draw_y);
        }
        
        for (draw_x = 16; draw_x &lt; place_width - 16; draw_x += 16) {
            for (draw_y = 16; draw_y &lt; place_height - 16; draw_y += 16) {
                draw_sprite(spr_floor, 0, place_x + draw_x, place_y + draw_y);
            }
        }*/
    //}
//}

draw_set_color(c_black);
draw_rectangle(vx, vy, vx + vw, vy + 32 - 1, false);

scr_draw_map(vx + vw / 2 - (15 * 5 / 2), vy + 16 - (8 * 3 / 2), map_grid);

draw_set_font(font_hud);
draw_set_halign(fa_middle);
draw_set_valign(fa_center);
draw_set_color(c_white);

for (var i = 0; i &lt; 5; i++) {
    draw_sprite(spr_key, i, vx + 12 + i * 16, vy + 8);
    draw_text(vx + 12 + i * 16, vy + 20, keys[i]);
}

for (var i = 0; i &lt; 5; i++) {
    draw_sprite(spr_heart, hp &lt; (i + 1), vx + vw - 76 + i * 16, vy + 16);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_hero.got = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (obj_lock) {
    instance_destroy();
}
with (obj_lock_puzzle) {
    instance_destroy();
}
with (obj_lock_enemy) {
    instance_destroy();
}
with (obj_final_lock) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
